// <auto-generated />
using System;
using System.Collections.Generic;
using HotelUp.Customer.Domain.Consts;
using HotelUp.Customer.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelUp.Customer.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20250108223454_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("customer")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "document_type", new[] { "passport", "id_card" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "presence_status", new[] { "pending", "checked_in", "checked_out" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "reservation_status", new[] { "valid", "canceled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "room_type", new[] { "economy", "basic", "premium" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelUp.Customer.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Clients", "customer");
                });

            modelBuilder.Entity("HotelUp.Customer.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<ReservationStatus>("Status")
                        .HasColumnType("customer.reservation_status");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "HotelUp.Customer.Domain.Entities.Reservation.Period#ReservationPeriod", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Reservations", "customer");
                });

            modelBuilder.Entity("HotelUp.Customer.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<RoomType>("Type")
                        .HasColumnType("customer.room_type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<bool>("WithSpecialNeeds")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Rooms", "customer");
                });

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoomsId")
                        .HasColumnType("integer");

                    b.HasKey("ReservationId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("ReservationRoom", "customer");
                });

            modelBuilder.Entity("HotelUp.Customer.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("HotelUp.Customer.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HotelUp.Customer.Domain.Entities.Bill", "Bill", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AccomodationPrice")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Bills", "customer");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");

                            b1.OwnsMany("HotelUp.Customer.Domain.Entities.AdditionalCost", "AdditionalCosts", b2 =>
                                {
                                    b2.Property<Guid>("BillId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Price")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("BillId", "Id");

                                    b2.ToTable("AdditionalCost", "customer");

                                    b2.WithOwner()
                                        .HasForeignKey("BillId")
                                        .HasPrincipalKey("Id");
                                });

                            b1.OwnsMany("HotelUp.Customer.Domain.Entities.Payment", "Payments", b2 =>
                                {
                                    b2.Property<Guid>("BillId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Amount")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("SettlementDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("BillId", "Id");

                                    b2.ToTable("Payment", "customer");

                                    b2.WithOwner()
                                        .HasForeignKey("BillId")
                                        .HasPrincipalKey("Id");
                                });

                            b1.Navigation("AdditionalCosts");

                            b1.Navigation("Payments");
                        });

                    b.OwnsMany("HotelUp.Customer.Domain.Entities.Tenant", "Tenants", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DocumentType>("DocumentType")
                                .HasColumnType("customer.document_type");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Pesel")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<PresenceStatus>("Status")
                                .HasColumnType("customer.presence_status");

                            b1.HasKey("ReservationId", "Id");

                            b1.ToTable("Tenants", "customer");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Bill");

                    b.Navigation("Client");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.HasOne("HotelUp.Customer.Domain.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelUp.Customer.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
